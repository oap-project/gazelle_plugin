-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 17


-- !query
CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES
(1, 1), (1, 2), (2, 1), (1, 1), (null, 2), (1, null), (null, null)
AS testData(a, b)
-- !query schema
struct<>
-- !query output



-- !query
SELECT
  count(*), count(1), count(null), count(a), count(b), count(a + b), count((a, b))
FROM testData
-- !query schema
struct<count(1):bigint,count(1):bigint,count(NULL):bigint,count(a):bigint,count(b):bigint,count((a + b)):bigint,count(named_struct(a, a, b, b)):bigint>
-- !query output
7	7	0	5	5	4	7


-- !query
SELECT
  count(DISTINCT 1),
  count(DISTINCT null),
  count(DISTINCT a),
  count(DISTINCT b),
  count(DISTINCT (a + b)),
  count(DISTINCT (a, b))
FROM testData
-- !query schema
struct<count(DISTINCT 1):bigint,count(DISTINCT NULL):bigint,count(DISTINCT a):bigint,count(DISTINCT b):bigint,count(DISTINCT (a + b)):bigint,count(DISTINCT named_struct(a, a, b, b)):bigint>
-- !query output
1	0	2	2	2	6


-- !query
SELECT count(a, b), count(b, a), count(testData.*) FROM testData
-- !query schema
struct<count(a, b):bigint,count(b, a):bigint,count(a, b):bigint>
-- !query output
4	4	4


-- !query
SELECT
  count(DISTINCT a, b), count(DISTINCT b, a), count(DISTINCT *), count(DISTINCT testData.*)
FROM testData
-- !query schema
struct<count(DISTINCT a, b):bigint,count(DISTINCT b, a):bigint,count(DISTINCT a, b):bigint,count(DISTINCT a, b):bigint>
-- !query output
3	3	3	3


-- !query
SELECT count(DISTINCT 3,2)
-- !query schema
struct<count(DISTINCT 3, 2):bigint>
-- !query output
1


-- !query
SELECT count(DISTINCT 2), count(DISTINCT 2,3)
-- !query schema
struct<count(DISTINCT 2):bigint,count(DISTINCT 2, 3):bigint>
-- !query output
1	1


-- !query
SELECT count(DISTINCT 2), count(DISTINCT 3,2)
-- !query schema
struct<count(DISTINCT 2):bigint,count(DISTINCT 3, 2):bigint>
-- !query output
1	1


-- !query
SELECT count(DISTINCT a), count(DISTINCT 2,3) FROM testData
-- !query schema
struct<count(DISTINCT a):bigint,count(DISTINCT 2, 3):bigint>
-- !query output
2	1


-- !query
SELECT count(DISTINCT a), count(DISTINCT 3,2) FROM testData
-- !query schema
struct<count(DISTINCT a):bigint,count(DISTINCT 3, 2):bigint>
-- !query output
2	1


-- !query
SELECT count(DISTINCT a), count(DISTINCT 2), count(DISTINCT 2,3) FROM testData
-- !query schema
struct<count(DISTINCT a):bigint,count(DISTINCT 2):bigint,count(DISTINCT 2, 3):bigint>
-- !query output
2	1	1


-- !query
SELECT count(DISTINCT a), count(DISTINCT 2), count(DISTINCT 3,2) FROM testData
-- !query schema
struct<count(DISTINCT a):bigint,count(DISTINCT 2):bigint,count(DISTINCT 3, 2):bigint>
-- !query output
2	1	1


-- !query
SELECT count(distinct 0.8), percentile_approx(distinct a, 0.8) FROM testData
-- !query schema
struct<count(DISTINCT 0.8):bigint,percentile_approx(DISTINCT a, CAST(0.8 AS DOUBLE), 10000):int>
-- !query output
1	2


-- !query
set spark.sql.legacy.allowParameterlessCount=true
-- !query schema
struct<key:string,value:string>
-- !query output
spark.sql.legacy.allowParameterlessCount	true


-- !query
SELECT count() FROM testData
-- !query schema
struct<count():bigint>
-- !query output
0


-- !query
set spark.sql.legacy.allowParameterlessCount=false
-- !query schema
struct<key:string,value:string>
-- !query output
spark.sql.legacy.allowParameterlessCount	false


-- !query
SELECT count() FROM testData
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
cannot resolve 'count()' due to data type mismatch: count requires at least one argument. If you have to call the function count without arguments, set the legacy configuration `spark.sql.legacy.allowParameterlessCount` as true; line 1 pos 7
