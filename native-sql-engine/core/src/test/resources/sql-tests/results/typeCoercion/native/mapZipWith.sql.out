-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 16


-- !query
CREATE TEMPORARY VIEW various_maps AS SELECT * FROM VALUES (
  map(true, false),
  map(2Y, 1Y),
  map(2S, 1S),
  map(2, 1),
  map(2L, 1L),
  map(922337203685477897945456575809789456, 922337203685477897945456575809789456),
  map(9.22337203685477897945456575809789456, 9.22337203685477897945456575809789456),
  map(2.0D, 1.0D),
  map(float(2.0), float(1.0)),
  map(date '2016-03-14', date '2016-03-13'),
  map(timestamp '2016-11-15 20:54:00.000', timestamp '2016-11-12 20:54:00.000'),
  map('true', 'false', '2', '1'),
  map('2016-03-14', '2016-03-13'),
  map('2016-11-15 20:54:00.000', '2016-11-12 20:54:00.000'),
  map('922337203685477897945456575809789456', 'text'),
  map(array(1L, 2L), array(1L, 2L)), map(array(1, 2), array(1, 2)),
  map(struct(1S, 2L), struct(1S, 2L)), map(struct(1, 2), struct(1, 2))
) AS various_maps(
  boolean_map,
  tinyint_map,
  smallint_map,
  int_map,
  bigint_map,
  decimal_map1, decimal_map2,
  double_map,
  float_map,
  date_map,
  timestamp_map,
  string_map1, string_map2, string_map3, string_map4,
  array_map1, array_map2,
  struct_map1, struct_map2
)
-- !query schema
struct<>
-- !query output



-- !query
SELECT map_zip_with(tinyint_map, smallint_map, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<smallint,struct<k:smallint,v1:tinyint,v2:smallint>>>
-- !query output
{2:{"k":2,"v1":1,"v2":1}}


-- !query
SELECT map_zip_with(smallint_map, int_map, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<int,struct<k:int,v1:smallint,v2:int>>>
-- !query output
{2:{"k":2,"v1":1,"v2":1}}


-- !query
SELECT map_zip_with(int_map, bigint_map, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<bigint,struct<k:bigint,v1:int,v2:bigint>>>
-- !query output
{2:{"k":2,"v1":1,"v2":1}}


-- !query
SELECT map_zip_with(double_map, float_map, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<double,struct<k:double,v1:double,v2:float>>>
-- !query output
{2.0:{"k":2.0,"v1":1.0,"v2":1.0}}


-- !query
SELECT map_zip_with(decimal_map1, decimal_map2, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
cannot resolve 'map_zip_with(various_maps.`decimal_map1`, various_maps.`decimal_map2`, lambdafunction(struct(k, v1, v2), k, v1, v2))' due to argument data type mismatch: The input to function map_zip_with should have been two maps with compatible key types, but the key types are [decimal(36,0), decimal(36,35)].; line 1 pos 7


-- !query
SELECT map_zip_with(decimal_map1, int_map, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<decimal(36,0),struct<k:decimal(36,0),v1:decimal(36,0),v2:int>>>
-- !query output
{2:{"k":2,"v1":null,"v2":1},922337203685477897945456575809789456:{"k":922337203685477897945456575809789456,"v1":922337203685477897945456575809789456,"v2":null}}


-- !query
SELECT map_zip_with(decimal_map1, double_map, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<double,struct<k:double,v1:decimal(36,0),v2:double>>>
-- !query output
{2.0:{"k":2.0,"v1":null,"v2":1.0},9.223372036854779E35:{"k":9.223372036854779E35,"v1":922337203685477897945456575809789456,"v2":null}}


-- !query
SELECT map_zip_with(decimal_map2, int_map, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
cannot resolve 'map_zip_with(various_maps.`decimal_map2`, various_maps.`int_map`, lambdafunction(struct(k, v1, v2), k, v1, v2))' due to argument data type mismatch: The input to function map_zip_with should have been two maps with compatible key types, but the key types are [decimal(36,35), int].; line 1 pos 7


-- !query
SELECT map_zip_with(decimal_map2, double_map, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<double,struct<k:double,v1:decimal(36,35),v2:double>>>
-- !query output
{2.0:{"k":2.0,"v1":null,"v2":1.0},9.223372036854778:{"k":9.223372036854778,"v1":9.22337203685477897945456575809789456,"v2":null}}


-- !query
SELECT map_zip_with(string_map1, int_map, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<string,struct<k:string,v1:string,v2:int>>>
-- !query output
{"2":{"k":"2","v1":"1","v2":1},"true":{"k":"true","v1":"false","v2":null}}


-- !query
SELECT map_zip_with(string_map2, date_map, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<string,struct<k:string,v1:string,v2:date>>>
-- !query output
{"2016-03-14":{"k":"2016-03-14","v1":"2016-03-13","v2":2016-03-13}}


-- !query
SELECT map_zip_with(timestamp_map, string_map3, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<string,struct<k:string,v1:timestamp,v2:string>>>
-- !query output
{"2016-11-15 20:54:00":{"k":"2016-11-15 20:54:00","v1":2016-11-12 20:54:00,"v2":null},"2016-11-15 20:54:00.000":{"k":"2016-11-15 20:54:00.000","v1":null,"v2":"2016-11-12 20:54:00.000"}}


-- !query
SELECT map_zip_with(decimal_map1, string_map4, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<string,struct<k:string,v1:decimal(36,0),v2:string>>>
-- !query output
{"922337203685477897945456575809789456":{"k":"922337203685477897945456575809789456","v1":922337203685477897945456575809789456,"v2":"text"}}


-- !query
SELECT map_zip_with(array_map1, array_map2, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<array<bigint>,struct<k:array<bigint>,v1:array<bigint>,v2:array<int>>>>
-- !query output
{[1,2]:{"k":[1,2],"v1":[1,2],"v2":[1,2]}}


-- !query
SELECT map_zip_with(struct_map1, struct_map2, (k, v1, v2) -> struct(k, v1, v2)) m
FROM various_maps
-- !query schema
struct<m:map<struct<col1:int,col2:bigint>,struct<k:struct<col1:int,col2:bigint>,v1:struct<col1:smallint,col2:bigint>,v2:struct<col1:int,col2:int>>>>
-- !query output
{{"col1":1,"col2":2}:{"k":{"col1":1,"col2":2},"v1":{"col1":1,"col2":2},"v2":{"col1":1,"col2":2}}}
