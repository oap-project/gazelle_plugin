== Physical Plan ==
TakeOrderedAndProject (45)
+- * HashAggregate (44)
   +- Exchange (43)
      +- * HashAggregate (42)
         +- * Project (41)
            +- * BroadcastHashJoin Inner BuildRight (40)
               :- * Project (34)
               :  +- * SortMergeJoin Inner (33)
               :     :- * Sort (18)
               :     :  +- Exchange (17)
               :     :     +- * Project (16)
               :     :        +- * BroadcastHashJoin Inner BuildRight (15)
               :     :           :- * Project (10)
               :     :           :  +- * BroadcastHashJoin Inner BuildLeft (9)
               :     :           :     :- BroadcastExchange (5)
               :     :           :     :  +- * Project (4)
               :     :           :     :     +- * Filter (3)
               :     :           :     :        +- * ColumnarToRow (2)
               :     :           :     :           +- Scan parquet default.date_dim (1)
               :     :           :     +- * Filter (8)
               :     :           :        +- * ColumnarToRow (7)
               :     :           :           +- Scan parquet default.store_sales (6)
               :     :           +- BroadcastExchange (14)
               :     :              +- * Filter (13)
               :     :                 +- * ColumnarToRow (12)
               :     :                    +- Scan parquet default.store (11)
               :     +- * Sort (32)
               :        +- Exchange (31)
               :           +- * Project (30)
               :              +- * SortMergeJoin Inner (29)
               :                 :- * Sort (23)
               :                 :  +- Exchange (22)
               :                 :     +- * Filter (21)
               :                 :        +- * ColumnarToRow (20)
               :                 :           +- Scan parquet default.customer (19)
               :                 +- * Sort (28)
               :                    +- Exchange (27)
               :                       +- * Filter (26)
               :                          +- * ColumnarToRow (25)
               :                             +- Scan parquet default.customer_address (24)
               +- BroadcastExchange (39)
                  +- * Project (38)
                     +- * Filter (37)
                        +- * ColumnarToRow (36)
                           +- Scan parquet default.item (35)


(1) Scan parquet default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(3) Filter [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((((isnotnull(d_moy#3) AND isnotnull(d_year#2)) AND (d_moy#3 = 11)) AND (d_year#2 = 1998)) AND isnotnull(d_date_sk#1))

(4) Project [codegen id : 1]
Output [1]: [d_date_sk#1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(5) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#4]

(6) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(7) ColumnarToRow
Input [5]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9]

(8) Filter
Input [5]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9]
Condition : (((isnotnull(ss_sold_date_sk#5) AND isnotnull(ss_item_sk#6)) AND isnotnull(ss_customer_sk#7)) AND isnotnull(ss_store_sk#8))

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#5]
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9]
Input [6]: [d_date_sk#1, ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9]

(11) Scan parquet default.store
Output [2]: [s_store_sk#10, s_zip#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_zip:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#10, s_zip#11]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#10, s_zip#11]
Condition : (isnotnull(s_zip#11) AND isnotnull(s_store_sk#10))

(14) BroadcastExchange
Input [2]: [s_store_sk#10, s_zip#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#8]
Right keys [1]: [s_store_sk#10]
Join condition: None

(16) Project [codegen id : 3]
Output [4]: [ss_item_sk#6, ss_customer_sk#7, ss_ext_sales_price#9, s_zip#11]
Input [6]: [ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9, s_store_sk#10, s_zip#11]

(17) Exchange
Input [4]: [ss_item_sk#6, ss_customer_sk#7, ss_ext_sales_price#9, s_zip#11]
Arguments: hashpartitioning(ss_customer_sk#7, 5), ENSURE_REQUIREMENTS, [id=#13]

(18) Sort [codegen id : 4]
Input [4]: [ss_item_sk#6, ss_customer_sk#7, ss_ext_sales_price#9, s_zip#11]
Arguments: [ss_customer_sk#7 ASC NULLS FIRST], false, 0

(19) Scan parquet default.customer
Output [2]: [c_customer_sk#14, c_current_addr_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(20) ColumnarToRow [codegen id : 5]
Input [2]: [c_customer_sk#14, c_current_addr_sk#15]

(21) Filter [codegen id : 5]
Input [2]: [c_customer_sk#14, c_current_addr_sk#15]
Condition : (isnotnull(c_customer_sk#14) AND isnotnull(c_current_addr_sk#15))

(22) Exchange
Input [2]: [c_customer_sk#14, c_current_addr_sk#15]
Arguments: hashpartitioning(c_current_addr_sk#15, 5), ENSURE_REQUIREMENTS, [id=#16]

(23) Sort [codegen id : 6]
Input [2]: [c_customer_sk#14, c_current_addr_sk#15]
Arguments: [c_current_addr_sk#15 ASC NULLS FIRST], false, 0

(24) Scan parquet default.customer_address
Output [2]: [ca_address_sk#17, ca_zip#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_zip:string>

(25) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#17, ca_zip#18]

(26) Filter [codegen id : 7]
Input [2]: [ca_address_sk#17, ca_zip#18]
Condition : (isnotnull(ca_address_sk#17) AND isnotnull(ca_zip#18))

(27) Exchange
Input [2]: [ca_address_sk#17, ca_zip#18]
Arguments: hashpartitioning(ca_address_sk#17, 5), ENSURE_REQUIREMENTS, [id=#19]

(28) Sort [codegen id : 8]
Input [2]: [ca_address_sk#17, ca_zip#18]
Arguments: [ca_address_sk#17 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#15]
Right keys [1]: [ca_address_sk#17]
Join condition: None

(30) Project [codegen id : 9]
Output [2]: [c_customer_sk#14, ca_zip#18]
Input [4]: [c_customer_sk#14, c_current_addr_sk#15, ca_address_sk#17, ca_zip#18]

(31) Exchange
Input [2]: [c_customer_sk#14, ca_zip#18]
Arguments: hashpartitioning(c_customer_sk#14, 5), ENSURE_REQUIREMENTS, [id=#20]

(32) Sort [codegen id : 10]
Input [2]: [c_customer_sk#14, ca_zip#18]
Arguments: [c_customer_sk#14 ASC NULLS FIRST], false, 0

(33) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_customer_sk#7]
Right keys [1]: [c_customer_sk#14]
Join condition: NOT (substr(ca_zip#18, 1, 5) = substr(s_zip#11, 1, 5))

(34) Project [codegen id : 12]
Output [2]: [ss_item_sk#6, ss_ext_sales_price#9]
Input [6]: [ss_item_sk#6, ss_customer_sk#7, ss_ext_sales_price#9, s_zip#11, c_customer_sk#14, ca_zip#18]

(35) Scan parquet default.item
Output [6]: [i_item_sk#21, i_brand_id#22, i_brand#23, i_manufact_id#24, i_manufact#25, i_manager_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,8), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int>

(36) ColumnarToRow [codegen id : 11]
Input [6]: [i_item_sk#21, i_brand_id#22, i_brand#23, i_manufact_id#24, i_manufact#25, i_manager_id#26]

(37) Filter [codegen id : 11]
Input [6]: [i_item_sk#21, i_brand_id#22, i_brand#23, i_manufact_id#24, i_manufact#25, i_manager_id#26]
Condition : ((isnotnull(i_manager_id#26) AND (i_manager_id#26 = 8)) AND isnotnull(i_item_sk#21))

(38) Project [codegen id : 11]
Output [5]: [i_item_sk#21, i_brand_id#22, i_brand#23, i_manufact_id#24, i_manufact#25]
Input [6]: [i_item_sk#21, i_brand_id#22, i_brand#23, i_manufact_id#24, i_manufact#25, i_manager_id#26]

(39) BroadcastExchange
Input [5]: [i_item_sk#21, i_brand_id#22, i_brand#23, i_manufact_id#24, i_manufact#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27]

(40) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#6]
Right keys [1]: [i_item_sk#21]
Join condition: None

(41) Project [codegen id : 12]
Output [5]: [ss_ext_sales_price#9, i_brand_id#22, i_brand#23, i_manufact_id#24, i_manufact#25]
Input [7]: [ss_item_sk#6, ss_ext_sales_price#9, i_item_sk#21, i_brand_id#22, i_brand#23, i_manufact_id#24, i_manufact#25]

(42) HashAggregate [codegen id : 12]
Input [5]: [ss_ext_sales_price#9, i_brand_id#22, i_brand#23, i_manufact_id#24, i_manufact#25]
Keys [4]: [i_brand#23, i_brand_id#22, i_manufact_id#24, i_manufact#25]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#9))]
Aggregate Attributes [1]: [sum#28]
Results [5]: [i_brand#23, i_brand_id#22, i_manufact_id#24, i_manufact#25, sum#29]

(43) Exchange
Input [5]: [i_brand#23, i_brand_id#22, i_manufact_id#24, i_manufact#25, sum#29]
Arguments: hashpartitioning(i_brand#23, i_brand_id#22, i_manufact_id#24, i_manufact#25, 5), ENSURE_REQUIREMENTS, [id=#30]

(44) HashAggregate [codegen id : 13]
Input [5]: [i_brand#23, i_brand_id#22, i_manufact_id#24, i_manufact#25, sum#29]
Keys [4]: [i_brand#23, i_brand_id#22, i_manufact_id#24, i_manufact#25]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#9))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#9))#31]
Results [5]: [i_brand_id#22 AS brand_id#32, i_brand#23 AS brand#33, i_manufact_id#24, i_manufact#25, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#9))#31,17,2) AS ext_price#34]

(45) TakeOrderedAndProject
Input [5]: [brand_id#32, brand#33, i_manufact_id#24, i_manufact#25, ext_price#34]
Arguments: 100, [ext_price#34 DESC NULLS LAST, brand#33 ASC NULLS FIRST, brand_id#32 ASC NULLS FIRST, i_manufact_id#24 ASC NULLS FIRST, i_manufact#25 ASC NULLS FIRST], [brand_id#32, brand#33, i_manufact_id#24, i_manufact#25, ext_price#34]

