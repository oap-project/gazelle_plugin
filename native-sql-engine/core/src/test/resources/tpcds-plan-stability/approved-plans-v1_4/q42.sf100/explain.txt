== Physical Plan ==
TakeOrderedAndProject (21)
+- * HashAggregate (20)
   +- Exchange (19)
      +- * HashAggregate (18)
         +- * Project (17)
            +- * BroadcastHashJoin Inner BuildRight (16)
               :- * Project (10)
               :  +- * BroadcastHashJoin Inner BuildRight (9)
               :     :- * Filter (3)
               :     :  +- * ColumnarToRow (2)
               :     :     +- Scan parquet default.store_sales (1)
               :     +- BroadcastExchange (8)
               :        +- * Project (7)
               :           +- * Filter (6)
               :              +- * ColumnarToRow (5)
               :                 +- Scan parquet default.item (4)
               +- BroadcastExchange (15)
                  +- * Project (14)
                     +- * Filter (13)
                        +- * ColumnarToRow (12)
                           +- Scan parquet default.date_dim (11)


(1) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]

(3) Filter [codegen id : 3]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_item_sk#2))

(4) Scan parquet default.item
Output [4]: [i_item_sk#4, i_category_id#5, i_category#6, i_manager_id#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_category_id:int,i_category:string,i_manager_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#4, i_category_id#5, i_category#6, i_manager_id#7]

(6) Filter [codegen id : 1]
Input [4]: [i_item_sk#4, i_category_id#5, i_category#6, i_manager_id#7]
Condition : ((isnotnull(i_manager_id#7) AND (i_manager_id#7 = 1)) AND isnotnull(i_item_sk#4))

(7) Project [codegen id : 1]
Output [3]: [i_item_sk#4, i_category_id#5, i_category#6]
Input [4]: [i_item_sk#4, i_category_id#5, i_category#6, i_manager_id#7]

(8) BroadcastExchange
Input [3]: [i_item_sk#4, i_category_id#5, i_category#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#4]
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [ss_sold_date_sk#1, ss_ext_sales_price#3, i_category_id#5, i_category#6]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3, i_item_sk#4, i_category_id#5, i_category#6]

(11) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(13) Filter [codegen id : 2]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : ((((isnotnull(d_moy#11) AND isnotnull(d_year#10)) AND (d_moy#11 = 11)) AND (d_year#10 = 2000)) AND isnotnull(d_date_sk#9))

(14) Project [codegen id : 2]
Output [2]: [d_date_sk#9, d_year#10]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(15) BroadcastExchange
Input [2]: [d_date_sk#9, d_year#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(17) Project [codegen id : 3]
Output [4]: [d_year#10, ss_ext_sales_price#3, i_category_id#5, i_category#6]
Input [6]: [ss_sold_date_sk#1, ss_ext_sales_price#3, i_category_id#5, i_category#6, d_date_sk#9, d_year#10]

(18) HashAggregate [codegen id : 3]
Input [4]: [d_year#10, ss_ext_sales_price#3, i_category_id#5, i_category#6]
Keys [3]: [d_year#10, i_category_id#5, i_category#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum#13]
Results [4]: [d_year#10, i_category_id#5, i_category#6, sum#14]

(19) Exchange
Input [4]: [d_year#10, i_category_id#5, i_category#6, sum#14]
Arguments: hashpartitioning(d_year#10, i_category_id#5, i_category#6, 5), true, [id=#15]

(20) HashAggregate [codegen id : 4]
Input [4]: [d_year#10, i_category_id#5, i_category#6, sum#14]
Keys [3]: [d_year#10, i_category_id#5, i_category#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#3))#16]
Results [4]: [d_year#10, i_category_id#5, i_category#6, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#16,17,2) AS sum(ss_ext_sales_price)#17]

(21) TakeOrderedAndProject
Input [4]: [d_year#10, i_category_id#5, i_category#6, sum(ss_ext_sales_price)#17]
Arguments: 100, [sum(ss_ext_sales_price)#17 DESC NULLS LAST, d_year#10 ASC NULLS FIRST, i_category_id#5 ASC NULLS FIRST, i_category#6 ASC NULLS FIRST], [d_year#10, i_category_id#5, i_category#6, sum(ss_ext_sales_price)#17]

