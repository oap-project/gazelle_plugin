== Physical Plan ==
TakeOrderedAndProject (71)
+- * HashAggregate (70)
   +- Exchange (69)
      +- * HashAggregate (68)
         +- * HashAggregate (67)
            +- Exchange (66)
               +- * HashAggregate (65)
                  +- * Project (64)
                     +- * BroadcastHashJoin Inner BuildRight (63)
                        :- * Project (57)
                        :  +- * BroadcastHashJoin Inner BuildRight (56)
                        :     :- * Project (51)
                        :     :  +- * SortMergeJoin Inner (50)
                        :     :     :- * Sort (44)
                        :     :     :  +- Exchange (43)
                        :     :     :     +- * Project (42)
                        :     :     :        +- * SortMergeJoin Inner (41)
                        :     :     :           :- * Sort (35)
                        :     :     :           :  +- * HashAggregate (34)
                        :     :     :           :     +- * HashAggregate (33)
                        :     :     :           :        +- * Project (32)
                        :     :     :           :           +- * SortMergeJoin Inner (31)
                        :     :     :           :              :- * Sort (25)
                        :     :     :           :              :  +- Exchange (24)
                        :     :     :           :              :     +- * Project (23)
                        :     :     :           :              :        +- * BroadcastHashJoin Inner BuildRight (22)
                        :     :     :           :              :           :- * Project (16)
                        :     :     :           :              :           :  +- * BroadcastHashJoin Inner BuildRight (15)
                        :     :     :           :              :           :     :- Union (9)
                        :     :     :           :              :           :     :  :- * Project (4)
                        :     :     :           :              :           :     :  :  +- * Filter (3)
                        :     :     :           :              :           :     :  :     +- * ColumnarToRow (2)
                        :     :     :           :              :           :     :  :        +- Scan parquet default.catalog_sales (1)
                        :     :     :           :              :           :     :  +- * Project (8)
                        :     :     :           :              :           :     :     +- * Filter (7)
                        :     :     :           :              :           :     :        +- * ColumnarToRow (6)
                        :     :     :           :              :           :     :           +- Scan parquet default.web_sales (5)
                        :     :     :           :              :           :     +- BroadcastExchange (14)
                        :     :     :           :              :           :        +- * Project (13)
                        :     :     :           :              :           :           +- * Filter (12)
                        :     :     :           :              :           :              +- * ColumnarToRow (11)
                        :     :     :           :              :           :                 +- Scan parquet default.item (10)
                        :     :     :           :              :           +- BroadcastExchange (21)
                        :     :     :           :              :              +- * Project (20)
                        :     :     :           :              :                 +- * Filter (19)
                        :     :     :           :              :                    +- * ColumnarToRow (18)
                        :     :     :           :              :                       +- Scan parquet default.date_dim (17)
                        :     :     :           :              +- * Sort (30)
                        :     :     :           :                 +- Exchange (29)
                        :     :     :           :                    +- * Filter (28)
                        :     :     :           :                       +- * ColumnarToRow (27)
                        :     :     :           :                          +- Scan parquet default.customer (26)
                        :     :     :           +- * Sort (40)
                        :     :     :              +- Exchange (39)
                        :     :     :                 +- * Filter (38)
                        :     :     :                    +- * ColumnarToRow (37)
                        :     :     :                       +- Scan parquet default.store_sales (36)
                        :     :     +- * Sort (49)
                        :     :        +- Exchange (48)
                        :     :           +- * Filter (47)
                        :     :              +- * ColumnarToRow (46)
                        :     :                 +- Scan parquet default.customer_address (45)
                        :     +- BroadcastExchange (55)
                        :        +- * Filter (54)
                        :           +- * ColumnarToRow (53)
                        :              +- Scan parquet default.store (52)
                        +- BroadcastExchange (62)
                           +- * Project (61)
                              +- * Filter (60)
                                 +- * ColumnarToRow (59)
                                    +- Scan parquet default.date_dim (58)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3]
Condition : ((isnotnull(cs_item_sk#3) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_bill_customer_sk#2))

(4) Project [codegen id : 1]
Output [3]: [cs_sold_date_sk#1 AS sold_date_sk#4, cs_bill_customer_sk#2 AS customer_sk#5, cs_item_sk#3 AS item_sk#6]
Input [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3]

(5) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#7, ws_item_sk#8, ws_bill_customer_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int>

(6) ColumnarToRow [codegen id : 2]
Input [3]: [ws_sold_date_sk#7, ws_item_sk#8, ws_bill_customer_sk#9]

(7) Filter [codegen id : 2]
Input [3]: [ws_sold_date_sk#7, ws_item_sk#8, ws_bill_customer_sk#9]
Condition : ((isnotnull(ws_item_sk#8) AND isnotnull(ws_sold_date_sk#7)) AND isnotnull(ws_bill_customer_sk#9))

(8) Project [codegen id : 2]
Output [3]: [ws_sold_date_sk#7 AS sold_date_sk#10, ws_bill_customer_sk#9 AS customer_sk#11, ws_item_sk#8 AS item_sk#12]
Input [3]: [ws_sold_date_sk#7, ws_item_sk#8, ws_bill_customer_sk#9]

(9) Union

(10) Scan parquet default.item
Output [3]: [i_item_sk#13, i_class#14, i_category#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Women), EqualTo(i_class,maternity), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(11) ColumnarToRow [codegen id : 3]
Input [3]: [i_item_sk#13, i_class#14, i_category#15]

(12) Filter [codegen id : 3]
Input [3]: [i_item_sk#13, i_class#14, i_category#15]
Condition : ((((isnotnull(i_category#15) AND isnotnull(i_class#14)) AND (i_category#15 = Women)) AND (i_class#14 = maternity)) AND isnotnull(i_item_sk#13))

(13) Project [codegen id : 3]
Output [1]: [i_item_sk#13]
Input [3]: [i_item_sk#13, i_class#14, i_category#15]

(14) BroadcastExchange
Input [1]: [i_item_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(15) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [item_sk#6]
Right keys [1]: [i_item_sk#13]
Join condition: None

(16) Project [codegen id : 5]
Output [2]: [sold_date_sk#4, customer_sk#5]
Input [4]: [sold_date_sk#4, customer_sk#5, item_sk#6, i_item_sk#13]

(17) Scan parquet default.date_dim
Output [3]: [d_date_sk#17, d_year#18, d_moy#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(18) ColumnarToRow [codegen id : 4]
Input [3]: [d_date_sk#17, d_year#18, d_moy#19]

(19) Filter [codegen id : 4]
Input [3]: [d_date_sk#17, d_year#18, d_moy#19]
Condition : ((((isnotnull(d_moy#19) AND isnotnull(d_year#18)) AND (d_moy#19 = 12)) AND (d_year#18 = 1998)) AND isnotnull(d_date_sk#17))

(20) Project [codegen id : 4]
Output [1]: [d_date_sk#17]
Input [3]: [d_date_sk#17, d_year#18, d_moy#19]

(21) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sold_date_sk#4]
Right keys [1]: [d_date_sk#17]
Join condition: None

(23) Project [codegen id : 5]
Output [1]: [customer_sk#5]
Input [3]: [sold_date_sk#4, customer_sk#5, d_date_sk#17]

(24) Exchange
Input [1]: [customer_sk#5]
Arguments: hashpartitioning(customer_sk#5, 5), true, [id=#21]

(25) Sort [codegen id : 6]
Input [1]: [customer_sk#5]
Arguments: [customer_sk#5 ASC NULLS FIRST], false, 0

(26) Scan parquet default.customer
Output [2]: [c_customer_sk#22, c_current_addr_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(27) ColumnarToRow [codegen id : 7]
Input [2]: [c_customer_sk#22, c_current_addr_sk#23]

(28) Filter [codegen id : 7]
Input [2]: [c_customer_sk#22, c_current_addr_sk#23]
Condition : (isnotnull(c_customer_sk#22) AND isnotnull(c_current_addr_sk#23))

(29) Exchange
Input [2]: [c_customer_sk#22, c_current_addr_sk#23]
Arguments: hashpartitioning(c_customer_sk#22, 5), true, [id=#24]

(30) Sort [codegen id : 8]
Input [2]: [c_customer_sk#22, c_current_addr_sk#23]
Arguments: [c_customer_sk#22 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 9]
Left keys [1]: [customer_sk#5]
Right keys [1]: [c_customer_sk#22]
Join condition: None

(32) Project [codegen id : 9]
Output [2]: [c_customer_sk#22, c_current_addr_sk#23]
Input [3]: [customer_sk#5, c_customer_sk#22, c_current_addr_sk#23]

(33) HashAggregate [codegen id : 9]
Input [2]: [c_customer_sk#22, c_current_addr_sk#23]
Keys [2]: [c_customer_sk#22, c_current_addr_sk#23]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#22, c_current_addr_sk#23]

(34) HashAggregate [codegen id : 9]
Input [2]: [c_customer_sk#22, c_current_addr_sk#23]
Keys [2]: [c_customer_sk#22, c_current_addr_sk#23]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#22, c_current_addr_sk#23]

(35) Sort [codegen id : 9]
Input [2]: [c_customer_sk#22, c_current_addr_sk#23]
Arguments: [c_customer_sk#22 ASC NULLS FIRST], false, 0

(36) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#25, ss_customer_sk#26, ss_ext_sales_price#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>

(37) ColumnarToRow [codegen id : 10]
Input [3]: [ss_sold_date_sk#25, ss_customer_sk#26, ss_ext_sales_price#27]

(38) Filter [codegen id : 10]
Input [3]: [ss_sold_date_sk#25, ss_customer_sk#26, ss_ext_sales_price#27]
Condition : (isnotnull(ss_customer_sk#26) AND isnotnull(ss_sold_date_sk#25))

(39) Exchange
Input [3]: [ss_sold_date_sk#25, ss_customer_sk#26, ss_ext_sales_price#27]
Arguments: hashpartitioning(ss_customer_sk#26, 5), true, [id=#28]

(40) Sort [codegen id : 11]
Input [3]: [ss_sold_date_sk#25, ss_customer_sk#26, ss_ext_sales_price#27]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 12]
Left keys [1]: [c_customer_sk#22]
Right keys [1]: [ss_customer_sk#26]
Join condition: None

(42) Project [codegen id : 12]
Output [4]: [c_customer_sk#22, c_current_addr_sk#23, ss_sold_date_sk#25, ss_ext_sales_price#27]
Input [5]: [c_customer_sk#22, c_current_addr_sk#23, ss_sold_date_sk#25, ss_customer_sk#26, ss_ext_sales_price#27]

(43) Exchange
Input [4]: [c_customer_sk#22, c_current_addr_sk#23, ss_sold_date_sk#25, ss_ext_sales_price#27]
Arguments: hashpartitioning(c_current_addr_sk#23, 5), true, [id=#29]

(44) Sort [codegen id : 13]
Input [4]: [c_customer_sk#22, c_current_addr_sk#23, ss_sold_date_sk#25, ss_ext_sales_price#27]
Arguments: [c_current_addr_sk#23 ASC NULLS FIRST], false, 0

(45) Scan parquet default.customer_address
Output [3]: [ca_address_sk#30, ca_county#31, ca_state#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>

(46) ColumnarToRow [codegen id : 14]
Input [3]: [ca_address_sk#30, ca_county#31, ca_state#32]

(47) Filter [codegen id : 14]
Input [3]: [ca_address_sk#30, ca_county#31, ca_state#32]
Condition : ((isnotnull(ca_address_sk#30) AND isnotnull(ca_county#31)) AND isnotnull(ca_state#32))

(48) Exchange
Input [3]: [ca_address_sk#30, ca_county#31, ca_state#32]
Arguments: hashpartitioning(ca_address_sk#30, 5), true, [id=#33]

(49) Sort [codegen id : 15]
Input [3]: [ca_address_sk#30, ca_county#31, ca_state#32]
Arguments: [ca_address_sk#30 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 18]
Left keys [1]: [c_current_addr_sk#23]
Right keys [1]: [ca_address_sk#30]
Join condition: None

(51) Project [codegen id : 18]
Output [5]: [c_customer_sk#22, ss_sold_date_sk#25, ss_ext_sales_price#27, ca_county#31, ca_state#32]
Input [7]: [c_customer_sk#22, c_current_addr_sk#23, ss_sold_date_sk#25, ss_ext_sales_price#27, ca_address_sk#30, ca_county#31, ca_state#32]

(52) Scan parquet default.store
Output [2]: [s_county#34, s_state#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)]
ReadSchema: struct<s_county:string,s_state:string>

(53) ColumnarToRow [codegen id : 16]
Input [2]: [s_county#34, s_state#35]

(54) Filter [codegen id : 16]
Input [2]: [s_county#34, s_state#35]
Condition : (isnotnull(s_county#34) AND isnotnull(s_state#35))

(55) BroadcastExchange
Input [2]: [s_county#34, s_state#35]
Arguments: HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [id=#36]

(56) BroadcastHashJoin [codegen id : 18]
Left keys [2]: [ca_county#31, ca_state#32]
Right keys [2]: [s_county#34, s_state#35]
Join condition: None

(57) Project [codegen id : 18]
Output [3]: [c_customer_sk#22, ss_sold_date_sk#25, ss_ext_sales_price#27]
Input [7]: [c_customer_sk#22, ss_sold_date_sk#25, ss_ext_sales_price#27, ca_county#31, ca_state#32, s_county#34, s_state#35]

(58) Scan parquet default.date_dim
Output [2]: [d_date_sk#17, d_month_seq#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(59) ColumnarToRow [codegen id : 17]
Input [2]: [d_date_sk#17, d_month_seq#37]

(60) Filter [codegen id : 17]
Input [2]: [d_date_sk#17, d_month_seq#37]
Condition : (((isnotnull(d_month_seq#37) AND (d_month_seq#37 >= Subquery scalar-subquery#38, [id=#39])) AND (d_month_seq#37 <= Subquery scalar-subquery#40, [id=#41])) AND isnotnull(d_date_sk#17))

(61) Project [codegen id : 17]
Output [1]: [d_date_sk#17]
Input [2]: [d_date_sk#17, d_month_seq#37]

(62) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(63) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ss_sold_date_sk#25]
Right keys [1]: [d_date_sk#17]
Join condition: None

(64) Project [codegen id : 18]
Output [2]: [c_customer_sk#22, ss_ext_sales_price#27]
Input [4]: [c_customer_sk#22, ss_sold_date_sk#25, ss_ext_sales_price#27, d_date_sk#17]

(65) HashAggregate [codegen id : 18]
Input [2]: [c_customer_sk#22, ss_ext_sales_price#27]
Keys [1]: [c_customer_sk#22]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#27))]
Aggregate Attributes [1]: [sum#43]
Results [2]: [c_customer_sk#22, sum#44]

(66) Exchange
Input [2]: [c_customer_sk#22, sum#44]
Arguments: hashpartitioning(c_customer_sk#22, 5), true, [id=#45]

(67) HashAggregate [codegen id : 19]
Input [2]: [c_customer_sk#22, sum#44]
Keys [1]: [c_customer_sk#22]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#27))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#27))#46]
Results [1]: [cast(CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#27))#46,17,2)) / 50.00), DecimalType(21,6), true) as int) AS segment#47]

(68) HashAggregate [codegen id : 19]
Input [1]: [segment#47]
Keys [1]: [segment#47]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#48]
Results [2]: [segment#47, count#49]

(69) Exchange
Input [2]: [segment#47, count#49]
Arguments: hashpartitioning(segment#47, 5), true, [id=#50]

(70) HashAggregate [codegen id : 20]
Input [2]: [segment#47, count#49]
Keys [1]: [segment#47]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#51]
Results [3]: [segment#47, count(1)#51 AS num_customers#52, (segment#47 * 50) AS segment_base#53]

(71) TakeOrderedAndProject
Input [3]: [segment#47, num_customers#52, segment_base#53]
Arguments: 100, [segment#47 ASC NULLS FIRST, num_customers#52 ASC NULLS FIRST], [segment#47, num_customers#52, segment_base#53]

===== Subqueries =====

Subquery:1 Hosting operator id = 60 Hosting Expression = Subquery scalar-subquery#38, [id=#39]
* HashAggregate (78)
+- Exchange (77)
   +- * HashAggregate (76)
      +- * Project (75)
         +- * Filter (74)
            +- * ColumnarToRow (73)
               +- Scan parquet default.date_dim (72)


(72) Scan parquet default.date_dim
Output [3]: [d_month_seq#37, d_year#18, d_moy#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(73) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#37, d_year#18, d_moy#19]

(74) Filter [codegen id : 1]
Input [3]: [d_month_seq#37, d_year#18, d_moy#19]
Condition : (((isnotnull(d_year#18) AND isnotnull(d_moy#19)) AND (d_year#18 = 1998)) AND (d_moy#19 = 12))

(75) Project [codegen id : 1]
Output [1]: [(d_month_seq#37 + 1) AS (d_month_seq + 1)#54]
Input [3]: [d_month_seq#37, d_year#18, d_moy#19]

(76) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 1)#54]
Keys [1]: [(d_month_seq + 1)#54]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#54]

(77) Exchange
Input [1]: [(d_month_seq + 1)#54]
Arguments: hashpartitioning((d_month_seq + 1)#54, 5), true, [id=#55]

(78) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 1)#54]
Keys [1]: [(d_month_seq + 1)#54]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#54]

Subquery:2 Hosting operator id = 60 Hosting Expression = Subquery scalar-subquery#40, [id=#41]
* HashAggregate (85)
+- Exchange (84)
   +- * HashAggregate (83)
      +- * Project (82)
         +- * Filter (81)
            +- * ColumnarToRow (80)
               +- Scan parquet default.date_dim (79)


(79) Scan parquet default.date_dim
Output [3]: [d_month_seq#37, d_year#18, d_moy#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(80) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#37, d_year#18, d_moy#19]

(81) Filter [codegen id : 1]
Input [3]: [d_month_seq#37, d_year#18, d_moy#19]
Condition : (((isnotnull(d_year#18) AND isnotnull(d_moy#19)) AND (d_year#18 = 1998)) AND (d_moy#19 = 12))

(82) Project [codegen id : 1]
Output [1]: [(d_month_seq#37 + 3) AS (d_month_seq + 3)#56]
Input [3]: [d_month_seq#37, d_year#18, d_moy#19]

(83) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 3)#56]
Keys [1]: [(d_month_seq + 3)#56]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#56]

(84) Exchange
Input [1]: [(d_month_seq + 3)#56]
Arguments: hashpartitioning((d_month_seq + 3)#56, 5), true, [id=#57]

(85) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 3)#56]
Keys [1]: [(d_month_seq + 3)#56]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#56]


