== Physical Plan ==
TakeOrderedAndProject (31)
+- * HashAggregate (30)
   +- Exchange (29)
      +- * HashAggregate (28)
         +- * Project (27)
            +- * SortMergeJoin Inner (26)
               :- * Sort (20)
               :  +- Exchange (19)
               :     +- * Project (18)
               :        +- * BroadcastHashJoin Inner BuildRight (17)
               :           :- * Project (11)
               :           :  +- * BroadcastHashJoin Inner BuildLeft (10)
               :           :     :- BroadcastExchange (5)
               :           :     :  +- * Project (4)
               :           :     :     +- * Filter (3)
               :           :     :        +- * ColumnarToRow (2)
               :           :     :           +- Scan parquet default.item (1)
               :           :     +- * Project (9)
               :           :        +- * Filter (8)
               :           :           +- * ColumnarToRow (7)
               :           :              +- Scan parquet default.inventory (6)
               :           +- BroadcastExchange (16)
               :              +- * Project (15)
               :                 +- * Filter (14)
               :                    +- * ColumnarToRow (13)
               :                       +- Scan parquet default.date_dim (12)
               +- * Sort (25)
                  +- Exchange (24)
                     +- * Filter (23)
                        +- * ColumnarToRow (22)
                           +- Scan parquet default.store_sales (21)


(1) Scan parquet default.item
Output [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,62.00), In(i_manufact_id, [129,270,821,423]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_id:int>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]

(3) Filter [codegen id : 1]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]
Condition : ((((isnotnull(i_current_price#4) AND (i_current_price#4 >= 62.00)) AND (cast(i_current_price#4 as decimal(12,2)) <= 92.00)) AND i_manufact_id#5 IN (129,270,821,423)) AND isnotnull(i_item_sk#1))

(4) Project [codegen id : 1]
Output [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]

(5) BroadcastExchange
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(6) Scan parquet default.inventory
Output [3]: [inv_date_sk#7, inv_item_sk#8, inv_quantity_on_hand#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(inv_quantity_on_hand,500), IsNotNull(inv_item_sk), IsNotNull(inv_date_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_quantity_on_hand:int>

(7) ColumnarToRow
Input [3]: [inv_date_sk#7, inv_item_sk#8, inv_quantity_on_hand#9]

(8) Filter
Input [3]: [inv_date_sk#7, inv_item_sk#8, inv_quantity_on_hand#9]
Condition : ((((isnotnull(inv_quantity_on_hand#9) AND (inv_quantity_on_hand#9 >= 100)) AND (inv_quantity_on_hand#9 <= 500)) AND isnotnull(inv_item_sk#8)) AND isnotnull(inv_date_sk#7))

(9) Project
Output [2]: [inv_date_sk#7, inv_item_sk#8]
Input [3]: [inv_date_sk#7, inv_item_sk#8, inv_quantity_on_hand#9]

(10) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [inv_item_sk#8]
Join condition: None

(11) Project [codegen id : 3]
Output [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#7]
Input [6]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#7, inv_item_sk#8]

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_date#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-05-25), LessThanOrEqual(d_date,2000-07-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(13) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_date#11]

(14) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_date#11]
Condition : (((isnotnull(d_date#11) AND (d_date#11 >= 11102)) AND (d_date#11 <= 11162)) AND isnotnull(d_date_sk#10))

(15) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_date#11]

(16) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_date_sk#7]
Right keys [1]: [d_date_sk#10]
Join condition: None

(18) Project [codegen id : 3]
Output [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Input [6]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#7, d_date_sk#10]

(19) Exchange
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: hashpartitioning(i_item_sk#1, 5), true, [id=#13]

(20) Sort [codegen id : 4]
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: [i_item_sk#1 ASC NULLS FIRST], false, 0

(21) Scan parquet default.store_sales
Output [1]: [ss_item_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(22) ColumnarToRow [codegen id : 5]
Input [1]: [ss_item_sk#14]

(23) Filter [codegen id : 5]
Input [1]: [ss_item_sk#14]
Condition : isnotnull(ss_item_sk#14)

(24) Exchange
Input [1]: [ss_item_sk#14]
Arguments: hashpartitioning(ss_item_sk#14, 5), true, [id=#15]

(25) Sort [codegen id : 6]
Input [1]: [ss_item_sk#14]
Arguments: [ss_item_sk#14 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 7]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#14]
Join condition: None

(27) Project [codegen id : 7]
Output [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, ss_item_sk#14]

(28) HashAggregate [codegen id : 7]
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Keys [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]

(29) Exchange
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: hashpartitioning(i_item_id#2, i_item_desc#3, i_current_price#4, 5), true, [id=#16]

(30) HashAggregate [codegen id : 8]
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Keys [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]

(31) TakeOrderedAndProject
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: 100, [i_item_id#2 ASC NULLS FIRST], [i_item_id#2, i_item_desc#3, i_current_price#4]

